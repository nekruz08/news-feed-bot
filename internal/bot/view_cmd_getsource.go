package bot

import (
	"context"
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/nekruz08/news-feed-bot/internal/botkit"
	"github.com/nekruz08/news-feed-bot/internal/botkit/markup"
	"github.com/nekruz08/news-feed-bot/internal/model"
	"github.com/nekruz08/news-feed-bot/internal/storage" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç —Å –æ—à–∏–±–∫–æ–π
)

type SourceProvider interface {
	SourceByID(ctx context.Context, id int64) (*model.Source, error)
}

func ViewCmdGetSource(provider SourceProvider) botkit.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update tgbotapi.Update) error {
		idStr := update.Message.CommandArguments()

		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
			if _, err := bot.Send(reply); err != nil {
				return err
			}
			return nil
		}

		source, err := provider.SourceByID(ctx, id)
		if err != nil {
			if err == storage.ErrSourceNotFound { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
				reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
				if _, err := bot.Send(reply); err != nil {
					return err
				}
				return nil
			}
			// –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏)
			reply := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			if _, err := bot.Send(reply); err != nil {
				return err
			}
			return nil
		}

		reply := tgbotapi.NewMessage(update.Message.Chat.ID, formatSource(*source))
		reply.ParseMode = parseModeMarkdownV2

		if _, err := bot.Send(reply); err != nil {
			return err
		}

		return nil
	}
}

func formatSource(source model.Source) string {
	return fmt.Sprintf(
		"üåê *%s*\nID: `%d`\nURL —Ñ–∏–¥–∞: %s\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %d",
		markup.EscapeForMarkdown(source.Name),
		source.ID,
		markup.EscapeForMarkdown(source.FeedURL),
		source.Priority,
	)
}
